# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['UnbufferedServer', 'tweet_text', 'check_sig', 'run_server', 'fastwebhook_install_service']

# Cell
import json,tweepy,hmac,hashlib,traceback,shutil,time

from fastcore.imports import *
from fastcore.foundation import *
from fastcore.utils import *
from fastcore.script import *
from fastcore.meta import *
from fastcore.test import *
from configparser import ConfigParser
from ipaddress import ip_address,ip_network
from http.server import ThreadingHTTPServer, BaseHTTPRequestHandler
from textwrap import dedent

# Cell
class _Unbuffered(GetAttr):
    def __init__(self, stream): self.default = stream
    def write     (self, data): self.default.write     (data); self.default.flush()
    def writelines(self, data): self.default.writelines(data); self.default.flush()

# Cell
@delegates()
class UnbufferedServer(ThreadingHTTPServer):
    "A `ThreadingHTTPServer` that disables output buffering, for more convenient logging"
    def __init__(self, server_address, RequestHandlerClass, **kwargs):
        super().__init__(server_address, RequestHandlerClass, **kwargs)
        self.oldunbuf = os.getenv('PYTHONUNBUFFERED', '')
        os.environ['PYTHONUNBUFFERED'] = '1'
        self.oldout,self.olderr = sys.stdout,sys.stderr
        if hasattr(sys.stdout, 'reconfigure'): #py37+
            sys.stdout.reconfigure(line_buffering=True)
            sys.stderr.reconfigure(line_buffering=True)
        else:
            sys.stdout = _Unbuffered(sys.stdout)
            sys.stderr = _Unbuffered(sys.stderr)
        print(f"Listening on {self.server_address}")

    def server_close(self):
        time.sleep(0.3) # wait for last request to finish
        sys.stdout,sys.stderr = self.oldout,self.olderr
        os.environ['PYTHONUNBUFFERED'] = self.oldunbuf

# Cell
def tweet_text(payload):
    "Send a tweet announcing release based on `payload`"
    rel_json = payload['release']
    url = rel_json['url']
    owner,repo = re.findall(r'https://api.github.com/repos/([^/]+)/([^/]+)/', url)[0]
    tweet_tmpl = "New #{repo} release: v{tag_name}. {html_url}\n\n{body}"
    res = tweet_tmpl.format(repo=repo, tag_name=rel_json['tag_name'],
                            html_url=rel_json['html_url'], body=rel_json['body'])
    if len(res)<=280: return res
    return res[:279] + "â€¦"

# Cell
def check_sig(content, headers, secret):
    digest = hmac.new(secret, content, hashlib.sha1).hexdigest()
    assert f'sha1={digest}' == headers.get('X-Hub-Signature')

# Cell
class _RequestHandler(BaseHTTPRequestHandler):
    def _post(self):
        if self.server.check_ip:
            src_ip = ip_address(self.client_address[0])
            assert any((src_ip in wl) for wl in self.server.whitelist)
        self.send_response(200)
        self.end_headers()
        length = self.headers.get('content-length')
        if not length: return
        content = self.rfile.read(int(length))
        if self.server.debug:
            print(self.headers, content)
            return
        payload = json.loads(content.decode())
        if payload.get('action',None)=='released':
            check_sig(content, self.headers, self.server.gh_secret)
            tweet = tweet_text(payload)
            stat = self.server.api.update_status(tweet)
            print(stat.id)
        self.wfile.write(b'ok')

    def do_POST(self):
        try: self._post()
        except Exception as e: sys.stderr.write(traceback.format_exc())

    def log_message(self, fmt, *args): sys.stderr.write(fmt%args)

# Cell
@call_parse
def run_server(hostname: Param("Host name or IP", str)='localhost',
               port:     Param("Port to listen on", int)=8000,
               debug:    Param("If True, do not trigger actions, just print", bool_arg)=False,
               inifile:  Param("Path to settings ini file", str)='twitter.ini',
               check_ip: Param("Check source IP against GitHub list", bool_arg)=True,
               single_request=False):
    "Run a GitHub webhook server that tweets about new releases"
    assert os.path.exists(inifile), f"{inifile} not found"
    cfg = ConfigParser(interpolation=None)
    cfg.read([inifile])
    cfg = cfg['DEFAULT']
    auth = tweepy.OAuthHandler(cfg['consumer_key'], cfg['consumer_secret'])
    auth.set_access_token(cfg['access_token'], cfg['access_token_secret'])
    with UnbufferedServer((hostname, port), _RequestHandler) as httpd:
        httpd.gh_secret = bytes(cfg['gh_secret'], 'utf-8')
        httpd.api = tweepy.API(auth)
        httpd.whitelist = L(urljson('https://api.github.com/meta')['hooks']).map(ip_network)
        httpd.check_ip,httpd.debug = check_ip,debug
        if single_request: httpd.handle_request()
        else: httpd.serve_forever()

# Cell
@call_parse
def fastwebhook_install_service(hostname: Param("Host name or IP", str)='0.0.0.0',
                    port:     Param("Port to listen on", int)=8000,
                    inifile:  Param("Path to settings ini file", str)='twitter.ini',
                    check_ip: Param("Check source IP against GitHub list", bool_arg)=True,
                    service_path: Param("Directory to write service file to", str)="/etc/systemd/system/"):
    "Install fastwebhook as a service"
    script_loc = shutil.which('fastwebhook')
    inifile = Path(inifile).absolute()
    _unitfile = dedent(f"""
    [Unit]
    Description=fastwebhook
    Wants=network-online.target
    After=network-online.target

    [Service]
    ExecStart={script_loc} --inifile {inifile} --check_ip {check_ip} --hostname {hostname} --port {port}
    Restart=always

    [Install]
    WantedBy=multi-user.target""")
    Path("fastwebhook.service").write_text(_unitfile)
    run(f"sudo cp fastwebhook.service {service_path}")